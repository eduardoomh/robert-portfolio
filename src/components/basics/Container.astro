---
export interface Props {
  columns: number;
  customColumnsSize?: string;
  id?: string;
}

const { columns, id, customColumnsSize } = Astro.props;

// Generamos una clase condicional si customColumnsSize existe
const hasCustomGrid = Boolean(customColumnsSize);
---

<div class="container" id={id}>
  <div
    class={`content 
      ${columns === 2 ? "content-2-columns" : "content-1-column"} 
      ${hasCustomGrid ? "custom-columns" : ""}
    `}
    style={hasCustomGrid ? `--custom-grid: ${customColumnsSize}` : ""}
  >
    <slot />
  </div>
</div>

<style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 24px 16px;
    border-bottom: 1px solid #ffffff4d;
    max-width: 100vw;
    overflow-x: hidden;
  }

  .content {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    width: 100vw;
    box-sizing: border-box;
  }

  @media (min-width: 768px) {
    .container {
      padding: 0;
    }

    .content {
      display: grid;
      gap: 2rem;
      width: 1050px;
      padding: 48px 16px;
      max-width: 1200px;
    }

    .content-1-column {
      grid-template-columns: 1fr;
    }

    .content-2-columns {
      grid-template-columns: 1.1fr 1fr;
    }

    .custom-columns {
      grid-template-columns: var(--custom-grid);
    }
  }
</style>